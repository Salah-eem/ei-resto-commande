import {
  WebSocketGateway,
  WebSocketServer,
  OnGatewayInit,
  OnGatewayConnection,
  OnGatewayDisconnect,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { forwardRef, Inject, Logger } from '@nestjs/common';
import { OrderService } from 'src/order/order.service';

@WebSocketGateway({ cors: true })
export class LiveOrdersGateway
  implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect
{
  @WebSocketServer()
  server: Server;

  private logger = new Logger('LiveOrdersGateway');
  private connectedClients = new Set<string>();

  constructor(
    @Inject(forwardRef(() => OrderService))
    private readonly orderService: OrderService,
  ) {}

  afterInit(server: Server) {
    this.logger.log('Gateway initialisÃ© ðŸš€');
    // On stoppe dâ€™emblÃ©e le cron jusquâ€™Ã  ce quâ€™un client se connecte
    //this.orderService.stopPromoteScheduledCron();
  }

  handleConnection(client: Socket) {
    this.connectedClients.add(client.id);
    this.logger.log(`Client connectÃ©: ${client.id}`);

    if (this.connectedClients.size === 1) {
      // Premier client â†’ dÃ©marrage du cron
      this.logger.log('DÃ©marrage du cron promoteScheduledOrders');
      this.orderService.startPromoteScheduledCron();
    }
  }

  handleDisconnect(client: Socket) {
    this.connectedClients.delete(client.id);
    this.logger.log(`Client dÃ©connectÃ©: ${client.id}`);

    if (this.connectedClients.size === 0) {
      // Plus aucun client â†’ arrÃªt du cron
      this.logger.log('ArrÃªt du cron promoteScheduledOrders');
      this.orderService.stopPromoteScheduledCron();
    }
  }

  hasClients(): boolean {
    return this.connectedClients.size > 0;
  }

  sendUpdate() {
    this.server.emit('live-orders:update');
  }
}
